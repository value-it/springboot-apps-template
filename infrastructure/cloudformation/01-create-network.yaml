AWSTemplateFormatVersion:
  "2010-09-09"
Description: VPC & Network construction

# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------#
Parameters:
  ProjectName:
    Type: String
    Default: bootapps-tmpl
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prd

Resources:
  # ------------------------------------------------------------#
  #  VPC
  # ------------------------------------------------------------#
  # VPC Create
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      # VPC に対して DNS 解決がサポートされているか
      EnableDnsSupport: "true"
      # VPC 内に起動されるインスタンスが DNS ホスト名を取得するか
      EnableDnsHostnames: "true"
      # VPC 内に起動されるインスタンスの許可されているテナンシー
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-vpc"

  # InternetGateway Create
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-network-igw"

  # IGW Attach
  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # ------------------------------------------------------------#
  #  Subnet
  # ------------------------------------------------------------#
  # Public1 Subnet Create
  Public1Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: "10.0.0.0/24"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-network-public1-subnet"

  # Public2 Subnet Create
  Public2Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: "10.0.1.0/24"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-network-public2-subnet"

  # Public3 Subnet Create
  Public3Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-1d"
      CidrBlock: "10.0.2.0/24"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-network-public3-subnet"
#
#  # Private1 Subnet Create
#  Private1Subnet:
#    Type: "AWS::EC2::Subnet"
#    Properties:
#      AvailabilityZone: "ap-northeast-1a"
#      CidrBlock: "10.0.10.0/24"
#      VpcId: !Ref VPC
#      Tags:
#        - Key: Name
#          Value: !Sub "${ProjectName}-${Stage}-network-private1-subnet"
#
#  # Private2 Subnet Create
#  Private2Subnet:
#    Type: "AWS::EC2::Subnet"
#    Properties:
#      AvailabilityZone: "ap-northeast-1c"
#      CidrBlock: "10.0.11.0/24"
#      VpcId: !Ref VPC
#      Tags:
#        - Key: Name
#          Value: !Sub "${ProjectName}-${Stage}-network-private2-subnet"
#
#  # Private3 Subnet Create
#  Private3Subnet:
#    Type: "AWS::EC2::Subnet"
#    Properties:
#      AvailabilityZone: "ap-northeast-1d"
#      CidrBlock: "10.0.12.0/24"
#      VpcId: !Ref VPC
#      Tags:
#        - Key: Name
#          Value: !Sub "${ProjectName}-${Stage}-network-private3-subnet"
#
#  # ------------------------------------------------------------#
#  #  NAT Gateway
#  # ------------------------------------------------------------#
#  NATGateway:
#    Type: "AWS::EC2::NatGateway"
#    Properties:
#      # NAT ゲートウェイに関連付ける Elastic IPアドレスの割り当て ID
#      AllocationId: !GetAtt NATGatewayAEIP.AllocationId
#      SubnetId: !Ref Public1Subnet
#      Tags:
#        - Key: Name
#          Value: !Sub "${ProjectName}-${Stage}-network-natgw"
#  # NATGateway For Elastic IP Create
#  NATGatewayAEIP:
#    Type: "AWS::EC2::EIP"
#    Properties:
#      # ------------------------------------------------------
#      # Elastic IP アドレスが VPC のインスタンスで使用するか、
#      # EC2-Classic のインスタンスで使用するか
#      # ------------------------------------------------------
#      Domain: vpc

  # ------------------------------------------------------------#
  #  RouteTable
  # ------------------------------------------------------------#
  # Public RouteTable Create
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-network-public-route"

#  # Private RouteTable Create
#  PrivateRouteTable:
#    Type: "AWS::EC2::RouteTable"
#    Properties:
#      VpcId: !Ref VPC
#      Tags:
#        - Key: Name
#          Value: !Sub "${ProjectName}-${Stage}-network-private-route"

  # ------------------------------------------------------------#
  # Routing
  # ------------------------------------------------------------#
  # Public Route Create
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

#  PrivateRoute:
#    Type: "AWS::EC2::Route"
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable
#      DestinationCidrBlock: "0.0.0.0/0"
#      NatGatewayId: !Ref NATGateway

  # ------------------------------------------------------------#
  # RouteTable Associate
  # ------------------------------------------------------------#
  # Public1RouteTable Associate PublicSubnet
  Public1SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Public1Subnet
      RouteTableId: !Ref PublicRouteTable
  Public2SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Public2Subnet
      RouteTableId: !Ref PublicRouteTable
  Public3SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Public3Subnet
      RouteTableId: !Ref PublicRouteTable

#  Private1SubnetRouteTableAssociation:
#    Type: "AWS::EC2::SubnetRouteTableAssociation"
#    Properties:
#      SubnetId: !Ref Private1Subnet
#      RouteTableId: !Ref PrivateRouteTable
#  Private2SubnetRouteTableAssociation:
#    Type: "AWS::EC2::SubnetRouteTableAssociation"
#    Properties:
#      SubnetId: !Ref Private2Subnet
#      RouteTableId: !Ref PrivateRouteTable
#  Private3SubnetRouteTableAssociation:
#    Type: "AWS::EC2::SubnetRouteTableAssociation"
#    Properties:
#      SubnetId: !Ref Private3Subnet
#      RouteTableId: !Ref PrivateRouteTable

# ------------------------------------------------------------#
# Output Parameters
# ------------------------------------------------------------#
Outputs:
  # VPC
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub "${ProjectName}-${Stage}-network-vpc"

  # Subnet
  Public1Subnet:
    Value: !Ref Public1Subnet
    Export:
      Name: !Sub "${ProjectName}-${Stage}-network-public1-subnet"

  Public2Subnet:
    Value: !Ref Public2Subnet
    Export:
      Name: !Sub "${ProjectName}-${Stage}-network-public2-subnet"

  Public3Subnet:
    Value: !Ref Public3Subnet
    Export:
      Name: !Sub "${ProjectName}-${Stage}-network-public3-subnet"

#  Private1Subnet:
#    Value: !Ref Private1Subnet
#    Export:
#      Name: !Sub "${ProjectName}-${Stage}-network-private1-subnet"
#
#  Private2Subnet:
#    Value: !Ref Private2Subnet
#    Export:
#      Name: !Sub "${ProjectName}-${Stage}-network-private2-subnet"
#
#  Private3Subnet:
#    Value: !Ref Private3Subnet
#    Export:
#      Name: !Sub "${ProjectName}-${Stage}-network-private3-subnet"

  VPCCidrBlock:
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub "${ProjectName}-${Stage}-network-vpc-cidrblock"

